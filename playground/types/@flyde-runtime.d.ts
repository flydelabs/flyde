// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../@flyde/core
//   ../../../../events

declare module '@flyde/runtime' {
    import { ExecuteParams, FlydeFlow } from "@flyde/core";
    import EventEmitter = require("events");
    export { InternalCodeNode, BaseNode, VisualNode } from "@flyde/core";
    export type PromiseWithEmitter<T> = Promise<T> & {
        on: EventEmitter["on"];
    };
    export type LoadedFlowExecuteFn<Inputs> = (inputs?: Inputs, extraParams?: Partial<ExecuteParams & {
        onOutputs?: (key: string, data: any) => void;
    } & {
        executionDelay?: number;
    }>) => {
        result: Promise<Record<string, any>>;
        destroy: () => void;
    };
    export function loadFlowFromContent<Inputs>(flow: FlydeFlow, fullFlowPath: string, debuggerUrl: string): LoadedFlowExecuteFn<Inputs>;
    export function loadFlowByPath<Inputs>(relativePath: string, root?: string): LoadedFlowExecuteFn<Inputs>;
    export function loadFlow<Inputs>(flowOrPath: FlydeFlow | string, root?: string): LoadedFlowExecuteFn<Inputs>;
}

