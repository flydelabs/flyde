// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../@flyde/core
//   ../../../../events
//   ../../../../@flyde/core/dist/node

declare module '@flyde/loader' {
    export * from "@flyde/loader/resolver";
    export * from "@flyde/loader/serdes";
    export * from "@flyde/loader/runtime";
    export * from "@flyde/loader/run-flow";
    export { createServerReferencedNodeFinder } from "@flyde/loader/resolver/server/findReferencedNodeServer";
    export * from "@flyde/loader/resolver/server/resolveImportablePaths";
    export { resolveFlowByPath } from "@flyde/loader/resolver/server/resolveFlowServer";
    export { resolveCodeNodeDependencies, isCodeNodePath } from "@flyde/loader/resolver/server/serverUtils";
}

declare module '@flyde/loader/resolver' {
    export * from "@flyde/loader/resolver/resolveVisualNode";
    export * from "@flyde/loader/resolver/resolveEditorInstance";
    export * from "@flyde/loader/resolver/resolveEditorNode";
    export type { ReferencedNodeFinder } from "@flyde/loader/resolver/ReferencedNodeFinder";
}

declare module '@flyde/loader/serdes' {
    export * from "@flyde/loader/serdes/serialize";
    export * from "@flyde/loader/serdes/deserialize";
    export * from "@flyde/loader/serdes/migrations";
}

declare module '@flyde/loader/runtime' {
    import { ExecuteParams, FlydeFlow } from "@flyde/core";
    import EventEmitter = require("events");
    export { InternalCodeNode, BaseNode, VisualNode } from "@flyde/core";
    export * from "@flyde/loader/runtime/debugger";
    export type PromiseWithEmitter<T> = Promise<T> & {
        on: EventEmitter["on"];
    };
    export type LoadedFlowExecuteFn<Inputs> = (inputs?: Inputs, extraParams?: Partial<ExecuteParams & {
        onOutputs?: (key: string, data: any) => void;
    } & {
        executionDelay?: number;
    }>) => {
        result: Promise<Record<string, any>>;
        destroy: () => void;
    };
    export function loadFlowFromContent<Inputs>(flow: FlydeFlow, fullFlowPath: string, debuggerUrl: string, secrets?: Record<string, string>): LoadedFlowExecuteFn<Inputs>;
    export function loadFlowByPath<Inputs>(relativePath: string, root?: string, secrets?: Record<string, string>): LoadedFlowExecuteFn<Inputs>;
    export function loadFlow<Inputs>(flowOrPath: FlydeFlow | string, root?: string, secrets?: Record<string, string>): LoadedFlowExecuteFn<Inputs>;
}

declare module '@flyde/loader/run-flow' {
    import { RunNodeOptions } from "@flyde/core";
    export interface RunFlowOptions extends RunNodeOptions {
        root?: string;
        secrets?: Record<string, string>;
        debuggerUrl?: string;
    }
    export function runFlow<TInputs = any, TOutputs = any>(flowPath: string, inputs: TInputs, options?: RunFlowOptions): Promise<TOutputs>;
}

declare module '@flyde/loader/resolver/server/findReferencedNodeServer' {
    import { ReferencedNodeFinder } from "@flyde/loader/resolver/ReferencedNodeFinder";
    export function createServerReferencedNodeFinder(fullFlowPath: string): ReferencedNodeFinder;
}

declare module '@flyde/loader/resolver/server/resolveImportablePaths' {
    export const resolveImportablePaths: (rootPath: string, importPath: string) => string[];
}

declare module '@flyde/loader/resolver/server/resolveFlowServer' {
    import { InternalVisualNode } from "@flyde/core";
    import { VisualNode } from "@flyde/core";
    function _resolveFlow(fullFlowPath: string, secrets?: Record<string, string>): InternalVisualNode;
    export function resolveFlowServer(node: VisualNode, flowPath: string, secrets?: Record<string, string>): InternalVisualNode;
    export const resolveFlowByPath: typeof _resolveFlow;
    export {};
}

declare module '@flyde/loader/resolver/server/serverUtils' {
    import { CodeNode } from "@flyde/core";
    export function resolveCodeNodeDependencies(path: string): {
        errors: string[];
        nodes: {
            exportName: string;
            node: CodeNode<any>;
        }[];
    };
    export function isCodeNodePath(path: string): boolean;
    export function findTypeScriptSource(jsPath: string): string | null;
}

declare module '@flyde/loader/resolver/resolveVisualNode' {
    import { InternalVisualNode, VisualNode } from "@flyde/core";
    import { ReferencedNodeFinder } from "@flyde/loader/resolver/ReferencedNodeFinder";
    export function resolveVisualNode(visualNode: VisualNode, nodeFinder: ReferencedNodeFinder, secrets: Record<string, string>): InternalVisualNode;
}

declare module '@flyde/loader/resolver/resolveEditorInstance' {
    import { CodeNodeInstance, EditorNodeInstance } from "@flyde/core";
    import { ReferencedNodeFinder } from "@flyde/loader/resolver/ReferencedNodeFinder";
    export function resolveEditorInstance(instance: CodeNodeInstance, findReferencedNode: ReferencedNodeFinder): EditorNodeInstance;
}

declare module '@flyde/loader/resolver/resolveEditorNode' {
    import { EditorVisualNode, VisualNode } from "@flyde/core";
    import { ReferencedNodeFinder } from "@flyde/loader/resolver/ReferencedNodeFinder";
    export function resolveEditorNode(visualNode: VisualNode, findReferencedNode: ReferencedNodeFinder): EditorVisualNode;
}

declare module '@flyde/loader/resolver/ReferencedNodeFinder' {
    import { FlydeNode, CodeNode } from "@flyde/core";
    import { NodeInstance } from "@flyde/core/dist/node";
    export type ReferencedNodeFinder = (instance: NodeInstance) => FlydeNode | (CodeNode & {
        sourceCode: string;
    });
}

declare module '@flyde/loader/serdes/serialize' {
    import { FlydeFlow } from "@flyde/core";
    export const serializeFlow: (flow: FlydeFlow) => string;
}

declare module '@flyde/loader/serdes/deserialize' {
    import { FlydeFlow } from "@flyde/core";
    export function deserializeFlow(flowContents: string, path: string): FlydeFlow;
    export function deserializeFlowByPath(path: string): FlydeFlow;
}

declare module '@flyde/loader/serdes/migrations' {
    export * from "@flyde/loader/serdes/migrations/runMigrations";
}

declare module '@flyde/loader/runtime/debugger' {
    export * from "@flyde/loader/runtime/debugger/runtime-client";
    export * from "@flyde/loader/runtime/debugger/normalize-data";
}

declare module '@flyde/loader/serdes/migrations/runMigrations' {
    import { VisualNode } from "@flyde/core";
    export function runMigrations(data: {
        node?: VisualNode;
        imports?: any;
    }): {
        node?: VisualNode;
        imports?: any;
    };
}

declare module '@flyde/loader/runtime/debugger/runtime-client' {
    import { DebuggerCommand, DebuggerEvent, RemoteDebuggerCallback, RemoteDebuggerCancelFn } from "@flyde/core";
    export type RuntimeDebuggerClient = {
        onChange: (cb: RemoteDebuggerCallback<{}>) => RemoteDebuggerCancelFn;
        onInput: (cb: RemoteDebuggerCallback<{
            pinId: string;
            value: any;
        }>) => RemoteDebuggerCancelFn;
        emitEvent: (event: Omit<DebuggerEvent, "time">) => DebuggerCommand;
        emitChangeAwk: () => void;
        emitChangeError: (error: Error) => void;
        emitRuntimeReady: () => void;
        emitIsAlive: (bob: {
            time: number;
            hash: string;
        } | number) => void;
        destroy: () => Promise<void>;
        onDisconnect: (cb: () => void) => void;
        waitForConnection: () => Promise<void>;
    };
    export const DEFAULT_DT_SCALE = 1;
    export const createRuntimeClient: (url: string, executionId: string) => RuntimeDebuggerClient;
}

declare module '@flyde/loader/runtime/debugger/normalize-data' {
    export const normalizeData: (data: any) => any;
}

