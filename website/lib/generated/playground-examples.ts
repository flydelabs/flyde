// This file is auto-generated by build-playground-examples.ts
// Do not edit directly - edit files in /playground-examples instead

export interface PlaygroundExample {
  id: string;
  name: string;
  description: string;
  order: number;
  flow: any;
  files: Array<{
    name: string;
    type: 'flyde' | 'ts';
    content: string;
    description: string;
  }>;
}

export const playgroundExamples: PlaygroundExample[] = [
  {
    "id": "hello-world",
    "name": "Hello World",
    "description": "Simple greeting flow that demonstrates basic Flyde concepts",
    "order": 0,
    "flow": {
      "instances": [
        {
          "pos": {
            "x": 89.57865951397048,
            "y": -168.91223409434372
          },
          "id": "InlineValue-lt28i55w",
          "inputConfig": {},
          "nodeId": "InlineValue",
          "config": {
            "value": {
              "type": "string",
              "value": "Hello, {{name}}"
            }
          },
          "type": "code",
          "source": {
            "type": "package",
            "data": "@flyde/nodes"
          }
        }
      ],
      "connections": [
        {
          "from": {
            "insId": "__this",
            "pinId": "name"
          },
          "to": {
            "insId": "InlineValue-lt28i55w",
            "pinId": "name"
          }
        },
        {
          "from": {
            "insId": "InlineValue-lt28i55w",
            "pinId": "value"
          },
          "to": {
            "insId": "__this",
            "pinId": "response"
          }
        }
      ],
      "id": "Example",
      "inputs": {
        "name": {
          "mode": "required"
        }
      },
      "outputs": {
        "response": {
          "delayed": false
        }
      },
      "inputsPosition": {
        "question": {
          "x": -510.8552075195313,
          "y": -106.74767211914062
        },
        "userId": {
          "x": -521.2010229492188,
          "y": -5.160607910156251
        },
        "topic": {
          "x": -523.7615185546875,
          "y": -160.86858276367187
        },
        "name": {
          "x": -217.2192211914063,
          "y": -169.20122436523437
        }
      },
      "outputsPosition": {
        "result": {
          "x": -23.264428942324532,
          "y": 237.25953921502617
        },
        "blogPost": {
          "x": 663.252458190918,
          "y": -186.23055786132812
        },
        "response": {
          "x": 363.25312957763674,
          "y": -169.17501586914062
        }
      },
      "completionOutputs": []
    },
    "files": [
      {
        "name": "main.flyde",
        "type": "flyde",
        "content": "{\n  \"instances\": [\n    {\n      \"pos\": {\n        \"x\": 89.57865951397048,\n        \"y\": -168.91223409434372\n      },\n      \"id\": \"InlineValue-lt28i55w\",\n      \"inputConfig\": {},\n      \"nodeId\": \"InlineValue\",\n      \"config\": {\n        \"value\": {\n          \"type\": \"string\",\n          \"value\": \"Hello, {{name}}\"\n        }\n      },\n      \"type\": \"code\",\n      \"source\": {\n        \"type\": \"package\",\n        \"data\": \"@flyde/nodes\"\n      }\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": {\n        \"insId\": \"__this\",\n        \"pinId\": \"name\"\n      },\n      \"to\": {\n        \"insId\": \"InlineValue-lt28i55w\",\n        \"pinId\": \"name\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"InlineValue-lt28i55w\",\n        \"pinId\": \"value\"\n      },\n      \"to\": {\n        \"insId\": \"__this\",\n        \"pinId\": \"response\"\n      }\n    }\n  ],\n  \"id\": \"Example\",\n  \"inputs\": {\n    \"name\": {\n      \"mode\": \"required\"\n    }\n  },\n  \"outputs\": {\n    \"response\": {\n      \"delayed\": false\n    }\n  },\n  \"inputsPosition\": {\n    \"question\": {\n      \"x\": -510.8552075195313,\n      \"y\": -106.74767211914062\n    },\n    \"userId\": {\n      \"x\": -521.2010229492188,\n      \"y\": -5.160607910156251\n    },\n    \"topic\": {\n      \"x\": -523.7615185546875,\n      \"y\": -160.86858276367187\n    },\n    \"name\": {\n      \"x\": -217.2192211914063,\n      \"y\": -169.20122436523437\n    }\n  },\n  \"outputsPosition\": {\n    \"result\": {\n      \"x\": -23.264428942324532,\n      \"y\": 237.25953921502617\n    },\n    \"blogPost\": {\n      \"x\": 663.252458190918,\n      \"y\": -186.23055786132812\n    },\n    \"response\": {\n      \"x\": 363.25312957763674,\n      \"y\": -169.17501586914062\n    }\n  },\n  \"completionOutputs\": []\n}",
        "description": "Simple greeting flow with string interpolation"
      },
      {
        "name": "index.ts",
        "type": "ts",
        "content": "import { runFlow } from '@flyde/loader';\n\n// üéÆ Try changing the name below to see different greetings!\nconst name = 'World';\n// üí° Ideas to try:\n// const name = 'Alice';\n// const name = 'Developer';\n// const name = 'Flyde User';\n\nconsole.log(`üöÄ Starting Hello World flow with name: \"${name}\"`);\n\n// Execute the flow\nconst result = await runFlow('./main.flyde', { name });\n\nconsole.log(`‚úÖ Result: ${result.response}`);\n\n// üîç Explore more:\n// - Try running with different names\n// - Check out the visual flow in main.flyde tab\n// - Click Run to see the changes!",
        "description": "Basic usage example"
      }
    ]
  },
  {
    "id": "blog-generator",
    "name": "Blog Generator",
    "description": "Generate blog posts using AI with title generation, content creation, and summarization",
    "order": 1,
    "flow": {
      "instances": [
        {
          "pos": {
            "x": -372.3106216472647,
            "y": -237.38023521164422
          },
          "id": "OpenAI-7904gip",
          "inputConfig": {},
          "displayName": "Generate subject",
          "nodeId": "OpenAIStub",
          "config": {
            "apiKey": {
              "type": "string",
              "value": "OPENAI_API_KEY"
            },
            "model": {
              "type": "select",
              "value": "gpt-4.1"
            },
            "prompt": {
              "type": "string",
              "value": "You are a master blog post author, and a master on the topic of \"{{topic}}\"\nPlease generate a captivating blog post title. Return just the title, no wrappers."
            },
            "temperature": {
              "type": "number",
              "value": 0.7
            },
            "responseFormat": {
              "type": "select",
              "value": "text"
            },
            "jsonSchema": {
              "type": "json",
              "value": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string",
                    "description": "A summary of the text"
                  },
                  "keyPoints": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Key points from the text"
                  }
                },
                "required": [
                  "summary",
                  "keyPoints"
                ]
              }
            }
          },
          "type": "code",
          "source": {
            "type": "file",
            "data": "./OpenAIStub.flyde.ts"
          }
        },
        {
          "pos": {
            "x": -116.18342374876022,
            "y": -126.85574595958127
          },
          "id": "Anthropic-1j14gnl",
          "inputConfig": {},
          "nodeId": "AnthropicStub",
          "config": {
            "apiKey": {
              "type": "string",
              "value": "ANTHROPIC_API_KEY"
            },
            "model": {
              "type": "select",
              "value": "claude-sonnet-4-20250514"
            },
            "prompt": {
              "type": "string",
              "value": "You are a master blog post author, expert in the topic of {{topic}}\n\nPlease generarate a short (3 paragraphs tops) blog post content, in HTML, for the following subject:\n{{subject}}\n\nReturn  just HTML for the blog's content, no metadata or title, just HTML"
            },
            "temperature": {
              "type": "number",
              "value": 0.7
            },
            "maxTokens": {
              "type": "number",
              "value": 1000
            }
          },
          "type": "code",
          "source": {
            "type": "file",
            "data": "./AnthropicStub.flyde.ts"
          }
        },
        {
          "pos": {
            "x": 410.1566191297444,
            "y": -201.59529702959708
          },
          "id": "InlineValue-4y04ggy",
          "inputConfig": {},
          "displayName": "Blog post data",
          "nodeId": "InlineValue",
          "config": {
            "value": {
              "type": "json",
              "value": {
                "subject": "{{subject}}",
                "content": "{{content}}",
                "summary": "{{summary}}"
              }
            }
          },
          "type": "code",
          "source": {
            "type": "package",
            "data": "@flyde/nodes"
          }
        },
        {
          "pos": {
            "x": 153.96672291132245,
            "y": -57.827328586553676
          },
          "id": "OpenAI-bt14gqc",
          "inputConfig": {},
          "nodeId": "OpenAIStub",
          "config": {
            "apiKey": {
              "type": "string",
              "value": "OPENAI_API_KEY"
            },
            "model": {
              "type": "select",
              "value": "gpt-4.1-mini"
            },
            "prompt": {
              "type": "string",
              "value": "Generate a summary of the following blog post content: {{content}}"
            },
            "temperature": {
              "type": "number",
              "value": 0.7
            },
            "responseFormat": {
              "type": "select",
              "value": "text"
            },
            "jsonSchema": {
              "type": "json",
              "value": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string",
                    "description": "A summary of the text"
                  },
                  "keyPoints": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Key points from the text"
                  }
                },
                "required": [
                  "summary",
                  "keyPoints"
                ]
              }
            }
          },
          "type": "code",
          "source": {
            "type": "file",
            "data": "./OpenAIStub.flyde.ts"
          }
        }
      ],
      "connections": [
        {
          "from": {
            "insId": "__this",
            "pinId": "topic"
          },
          "to": {
            "insId": "OpenAI-7904gip",
            "pinId": "topic"
          }
        },
        {
          "from": {
            "insId": "OpenAI-7904gip",
            "pinId": "completion"
          },
          "to": {
            "insId": "Anthropic-1j14gnl",
            "pinId": "subject"
          }
        },
        {
          "from": {
            "insId": "__this",
            "pinId": "topic"
          },
          "to": {
            "insId": "Anthropic-1j14gnl",
            "pinId": "topic"
          }
        },
        {
          "from": {
            "insId": "OpenAI-7904gip",
            "pinId": "completion"
          },
          "to": {
            "insId": "InlineValue-4y04ggy",
            "pinId": "subject"
          }
        },
        {
          "from": {
            "insId": "Anthropic-1j14gnl",
            "pinId": "response"
          },
          "to": {
            "insId": "OpenAI-bt14gqc",
            "pinId": "content"
          }
        },
        {
          "from": {
            "insId": "OpenAI-bt14gqc",
            "pinId": "completion"
          },
          "to": {
            "insId": "InlineValue-4y04ggy",
            "pinId": "summary"
          }
        },
        {
          "from": {
            "insId": "Anthropic-1j14gnl",
            "pinId": "response"
          },
          "to": {
            "insId": "InlineValue-4y04ggy",
            "pinId": "content"
          }
        },
        {
          "from": {
            "insId": "InlineValue-4y04ggy",
            "pinId": "value"
          },
          "to": {
            "insId": "__this",
            "pinId": "blogPost"
          }
        }
      ],
      "id": "Example",
      "inputs": {
        "topic": {
          "mode": "required"
        }
      },
      "outputs": {
        "blogPost": {
          "delayed": false
        }
      },
      "inputsPosition": {
        "question": {
          "x": -510.8552075195313,
          "y": -106.74767211914062
        },
        "userId": {
          "x": -521.2010229492188,
          "y": -5.160607910156251
        },
        "topic": {
          "x": -560.4830456542969,
          "y": -109.08241943359374
        }
      },
      "outputsPosition": {
        "result": {
          "x": -23.264428942324532,
          "y": 237.25953921502617
        },
        "blogPost": {
          "x": 633.4904876708985,
          "y": -180.87246459960937
        }
      }
    },
    "files": [
      {
        "name": "main.flyde",
        "type": "flyde",
        "content": "{\n  \"instances\": [\n    {\n      \"pos\": {\n        \"x\": -372.3106216472647,\n        \"y\": -237.38023521164422\n      },\n      \"id\": \"OpenAI-7904gip\",\n      \"inputConfig\": {},\n      \"displayName\": \"Generate subject\",\n      \"nodeId\": \"OpenAIStub\",\n      \"config\": {\n        \"apiKey\": {\n          \"type\": \"string\",\n          \"value\": \"OPENAI_API_KEY\"\n        },\n        \"model\": {\n          \"type\": \"select\",\n          \"value\": \"gpt-4.1\"\n        },\n        \"prompt\": {\n          \"type\": \"string\",\n          \"value\": \"You are a master blog post author, and a master on the topic of \\\"{{topic}}\\\"\\nPlease generate a captivating blog post title. Return just the title, no wrappers.\"\n        },\n        \"temperature\": {\n          \"type\": \"number\",\n          \"value\": 0.7\n        },\n        \"responseFormat\": {\n          \"type\": \"select\",\n          \"value\": \"text\"\n        },\n        \"jsonSchema\": {\n          \"type\": \"json\",\n          \"value\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"summary\": {\n                \"type\": \"string\",\n                \"description\": \"A summary of the text\"\n              },\n              \"keyPoints\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"description\": \"Key points from the text\"\n              }\n            },\n            \"required\": [\n              \"summary\",\n              \"keyPoints\"\n            ]\n          }\n        }\n      },\n      \"type\": \"code\",\n      \"source\": {\n        \"type\": \"file\",\n        \"data\": \"./OpenAIStub.flyde.ts\"\n      }\n    },\n    {\n      \"pos\": {\n        \"x\": -116.18342374876022,\n        \"y\": -126.85574595958127\n      },\n      \"id\": \"Anthropic-1j14gnl\",\n      \"inputConfig\": {},\n      \"nodeId\": \"AnthropicStub\",\n      \"config\": {\n        \"apiKey\": {\n          \"type\": \"string\",\n          \"value\": \"ANTHROPIC_API_KEY\"\n        },\n        \"model\": {\n          \"type\": \"select\",\n          \"value\": \"claude-sonnet-4-20250514\"\n        },\n        \"prompt\": {\n          \"type\": \"string\",\n          \"value\": \"You are a master blog post author, expert in the topic of {{topic}}\\n\\nPlease generarate a short (3 paragraphs tops) blog post content, in HTML, for the following subject:\\n{{subject}}\\n\\nReturn  just HTML for the blog's content, no metadata or title, just HTML\"\n        },\n        \"temperature\": {\n          \"type\": \"number\",\n          \"value\": 0.7\n        },\n        \"maxTokens\": {\n          \"type\": \"number\",\n          \"value\": 1000\n        }\n      },\n      \"type\": \"code\",\n      \"source\": {\n        \"type\": \"file\",\n        \"data\": \"./AnthropicStub.flyde.ts\"\n      }\n    },\n    {\n      \"pos\": {\n        \"x\": 410.1566191297444,\n        \"y\": -201.59529702959708\n      },\n      \"id\": \"InlineValue-4y04ggy\",\n      \"inputConfig\": {},\n      \"displayName\": \"Blog post data\",\n      \"nodeId\": \"InlineValue\",\n      \"config\": {\n        \"value\": {\n          \"type\": \"json\",\n          \"value\": {\n            \"subject\": \"{{subject}}\",\n            \"content\": \"{{content}}\",\n            \"summary\": \"{{summary}}\"\n          }\n        }\n      },\n      \"type\": \"code\",\n      \"source\": {\n        \"type\": \"package\",\n        \"data\": \"@flyde/nodes\"\n      }\n    },\n    {\n      \"pos\": {\n        \"x\": 153.96672291132245,\n        \"y\": -57.827328586553676\n      },\n      \"id\": \"OpenAI-bt14gqc\",\n      \"inputConfig\": {},\n      \"nodeId\": \"OpenAIStub\",\n      \"config\": {\n        \"apiKey\": {\n          \"type\": \"string\",\n          \"value\": \"OPENAI_API_KEY\"\n        },\n        \"model\": {\n          \"type\": \"select\",\n          \"value\": \"gpt-4.1-mini\"\n        },\n        \"prompt\": {\n          \"type\": \"string\",\n          \"value\": \"Generate a summary of the following blog post content: {{content}}\"\n        },\n        \"temperature\": {\n          \"type\": \"number\",\n          \"value\": 0.7\n        },\n        \"responseFormat\": {\n          \"type\": \"select\",\n          \"value\": \"text\"\n        },\n        \"jsonSchema\": {\n          \"type\": \"json\",\n          \"value\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"summary\": {\n                \"type\": \"string\",\n                \"description\": \"A summary of the text\"\n              },\n              \"keyPoints\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"description\": \"Key points from the text\"\n              }\n            },\n            \"required\": [\n              \"summary\",\n              \"keyPoints\"\n            ]\n          }\n        }\n      },\n      \"type\": \"code\",\n      \"source\": {\n        \"type\": \"file\",\n        \"data\": \"./OpenAIStub.flyde.ts\"\n      }\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": {\n        \"insId\": \"__this\",\n        \"pinId\": \"topic\"\n      },\n      \"to\": {\n        \"insId\": \"OpenAI-7904gip\",\n        \"pinId\": \"topic\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"OpenAI-7904gip\",\n        \"pinId\": \"completion\"\n      },\n      \"to\": {\n        \"insId\": \"Anthropic-1j14gnl\",\n        \"pinId\": \"subject\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"__this\",\n        \"pinId\": \"topic\"\n      },\n      \"to\": {\n        \"insId\": \"Anthropic-1j14gnl\",\n        \"pinId\": \"topic\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"OpenAI-7904gip\",\n        \"pinId\": \"completion\"\n      },\n      \"to\": {\n        \"insId\": \"InlineValue-4y04ggy\",\n        \"pinId\": \"subject\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"Anthropic-1j14gnl\",\n        \"pinId\": \"response\"\n      },\n      \"to\": {\n        \"insId\": \"OpenAI-bt14gqc\",\n        \"pinId\": \"content\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"OpenAI-bt14gqc\",\n        \"pinId\": \"completion\"\n      },\n      \"to\": {\n        \"insId\": \"InlineValue-4y04ggy\",\n        \"pinId\": \"summary\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"Anthropic-1j14gnl\",\n        \"pinId\": \"response\"\n      },\n      \"to\": {\n        \"insId\": \"InlineValue-4y04ggy\",\n        \"pinId\": \"content\"\n      }\n    },\n    {\n      \"from\": {\n        \"insId\": \"InlineValue-4y04ggy\",\n        \"pinId\": \"value\"\n      },\n      \"to\": {\n        \"insId\": \"__this\",\n        \"pinId\": \"blogPost\"\n      }\n    }\n  ],\n  \"id\": \"Example\",\n  \"inputs\": {\n    \"topic\": {\n      \"mode\": \"required\"\n    }\n  },\n  \"outputs\": {\n    \"blogPost\": {\n      \"delayed\": false\n    }\n  },\n  \"inputsPosition\": {\n    \"question\": {\n      \"x\": -510.8552075195313,\n      \"y\": -106.74767211914062\n    },\n    \"userId\": {\n      \"x\": -521.2010229492188,\n      \"y\": -5.160607910156251\n    },\n    \"topic\": {\n      \"x\": -560.4830456542969,\n      \"y\": -109.08241943359374\n    }\n  },\n  \"outputsPosition\": {\n    \"result\": {\n      \"x\": -23.264428942324532,\n      \"y\": 237.25953921502617\n    },\n    \"blogPost\": {\n      \"x\": 633.4904876708985,\n      \"y\": -180.87246459960937\n    }\n  }\n}",
        "description": "The main flow that orchestrates blog post generation"
      },
      {
        "name": "index.ts",
        "type": "ts",
        "content": "import { runFlow } from '@flyde/loader';\n\n// üéÆ Try changing the topic to generate different blog posts!\nconst topic = 'AI in 2025';\n// üí° Popular topics to try:\n// const topic = 'The Future of Web Development';\n// const topic = 'Visual Programming Revolution';\n// const topic = 'TypeScript Best Practices';\n// const topic = 'React Performance Tips';\n\nconsole.log(`üìù Generating blog post about: \"${topic}\"`);\n\n// Execute the flow to generate a blog post\nconst result = await runFlow('./main.flyde', { topic });\n\nconsole.log('üéâ Generated Blog Post:');\nconsole.log('=' .repeat(50));\nconsole.log(result.blogPost);\nconsole.log('=' .repeat(50));\n\n// üîç Explore more:\n// - Try different topics above\n// - Watch the visual flow execution in main.flyde\n// - See how AI nodes work together to create content\n// - Each run generates unique content!\n\n// üí° Pro tip: Uncomment different topics and click Run to see the magic!",
        "description": "Simple usage example"
      },
      {
        "name": "OpenAIStub.flyde.ts",
        "type": "ts",
        "content": "import { CodeNode } from \"@flyde/core\";\n\n// Mock responses for realistic demo content\nconst mockBlogTitles = [\n  \"Why Visual Flows Are Perfect for Agentic Workflows\",\n  \"Building AI Agents: The Visual Approach\",\n  \"Agentic Systems Made Simple: In-Codebase Visual Flows\",\n  \"From Code to Canvas: Visualizing Agent Logic\",\n  \"The Future of AI Development: Visual Flow Programming\"\n];\n\nconst mockSummaries = {\n  AI: \"Explores why visual flows are the ideal solution for product teams building AI agents, covering maintainability, collaboration, and the benefits of in-codebase visual programming.\",\n  Technology: \"Examines how visual flows address the complexity of agentic systems, enabling better collaboration between PMs, designers, and engineers while accelerating development cycles.\",\n  Programming: \"Discusses the advantages of in-codebase visual flows that combine visual clarity with programmatic power, maintaining type safety and version control for AI systems.\"\n};\n\nexport const OpenAIStub: CodeNode = {\n  id: \"OpenAIStub\",\n  menuDisplayName: \"OpenAI (Custom Stub)\",\n  namespace: \"ai\",\n  icon: `<svg fill=\"currentColor\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"><title>OpenAI icon</title><path d=\"M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z\"></path></g></svg>`,\n  displayName: \"OpenAI (Custom Stub)\",\n  description: \"üé≠ Custom OpenAI stub for blog generation demo - Edit this file to customize responses!\",\n  inputs: {\n    apiKey: {\n      editorType: \"secret\",\n      editorTypeData: {\n        defaultName: \"OPENAI_API_KEY\",\n      },\n      description: \"üîë OpenAI API Key (ignored in browser stub)\",\n    },\n    model: {\n      defaultValue: \"gpt-4.1\",\n      editorType: \"select\",\n      editorTypeData: {\n        options: [\n          \"gpt-4.1\",\n          \"gpt-4.1-mini\",\n          \"gpt-4.1-nano\", \n          \"gpt-4o\",\n          \"chatgpt-4o-latest\",\n          \"gpt-4o-mini\",\n          \"o1\",\n          \"o1-mini\",\n          \"o3-mini\",\n          \"o1-preview\",\n        ],\n      },\n      description: \"ü§ñ The OpenAI model to simulate\",\n    },\n    prompt: {\n      defaultValue: \"Generate a summary of the following text: {{text}}\",\n      editorType: \"longtext\",\n      description: \"üí¨ Prompt for chat completion\",\n    },\n    temperature: {\n      defaultValue: 0.7,\n      editorType: \"number\",\n      description: \"üå°Ô∏è Temperature for text generation (0-1)\",\n    },\n    responseFormat: {\n      defaultValue: \"text\",\n      editorType: \"select\",\n      typeConfigurable: false,\n      editorTypeData: {\n        options: [\n          \"text\",\n          \"json_object\",\n          \"json_schema\"\n        ],\n      },\n      label: \"Response Format\",\n      description: \"üìã Format of the response (text, JSON object, or structured JSON)\",\n    },\n    jsonSchema: {\n      defaultValue: {\n        \"type\": \"object\",\n        \"properties\": {\n          \"summary\": {\n            \"type\": \"string\",\n            \"description\": \"A summary of the text\"\n          },\n          \"keyPoints\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Key points from the text\"\n          }\n        },\n        \"required\": [\"summary\", \"keyPoints\"]\n      },\n      editorType: \"json\",\n      label: \"JSON Schema\",\n      description: \"üèóÔ∏è JSON schema to structure the output (only used when responseFormat is 'json_schema')\",\n      condition: \"responseFormat === 'json_schema'\"\n    },\n  },\n  outputs: {\n    completion: {\n      description: \"üéØ Generated completion (as string)\",\n    }\n  },\n  run: async (inputs, outputs) => {\n    // üïê Mock delay to simulate API call - you can customize this!\n    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n\n    const { prompt, responseFormat } = inputs;\n    \n    // üîç Extract topic from prompt for more realistic responses\n    const topicMatch = prompt.match(/topic.*?\"([^\"]+)\"/i);\n    const topic = topicMatch ? topicMatch[1] : 'AI';\n    \n    let mockResponse: string;\n    \n    // üé≤ Generate different responses based on the prompt content\n    // üí° You can edit these patterns to customize responses!\n    if (prompt.includes('blog post title') || prompt.includes('captivating')) {\n      // üìù This is the title generation\n      const titles = mockBlogTitles;\n      const randomTitle = titles[Math.floor(Math.random() * titles.length)];\n      mockResponse = randomTitle.replace('{{topic}}', topic);\n    } else if (prompt.includes('summary')) {\n      // üìä This is the summary generation  \n      mockResponse = mockSummaries[topic as keyof typeof mockSummaries] || mockSummaries.AI;\n    } else {\n      // üîÑ Default response - customize this for your needs!\n      mockResponse = `This is a custom mock response about ${topic} - edit OpenAIStub.flyde.ts to customize!`;\n    }\n\n    // üì§ Handle different response formats\n    if (responseFormat === \"json_object\" || responseFormat === \"json_schema\") {\n      try {\n        const jsonResponse = {\n          summary: mockResponse,\n          keyPoints: [\n            `Key insight about ${topic}`,\n            `Important consideration for ${topic}`, \n            `Future outlook for ${topic}`\n          ]\n        };\n        outputs.completion.next(jsonResponse);\n      } catch (e) {\n        outputs.completion.next(mockResponse);\n      }\n    } else {\n      outputs.completion.next(mockResponse);\n    }\n  },\n};",
        "description": "üé≠ Editable OpenAI stub - customize responses here!"
      },
      {
        "name": "AnthropicStub.flyde.ts",
        "type": "ts",
        "content": "import { CodeNode } from \"@flyde/core\";\n\n// üìö Mock blog content templates - customize these for your use case!\nconst mockBlogContent = {\n  AI: `<h2>üß† Visual Flows: The Perfect Match for Agentic Workflows</h2>\n<p>Product teams building AI agents face a fundamental challenge: how to create complex, multi-step workflows that are both maintainable and comprehensible. Traditional code often becomes a tangled mess of function calls, making it difficult to understand the flow of data and decisions.</p>\n\n<p>Visual flows solve this by providing a clear, intuitive representation of your agent's logic. When your AI agent needs to process user input, call external APIs, make decisions, and format responses, a visual flow shows exactly how data moves through each step. This isn't just helpful for documentation‚Äîit's essential for debugging, iteration, and collaboration.</p>\n\n<p>The magic happens when these visual flows live directly in your codebase. Unlike external workflow tools that create silos, in-codebase visual flows integrate seamlessly with your existing TypeScript functions, maintain full type safety, and evolve alongside your application. Your team can see the big picture while still having access to the granular control that complex AI systems require.</p>`,\n\n  Technology: `<h2>üöÄ Why Product Teams Choose Visual Flows for AI Agents</h2>\n<p>Building agentic systems requires coordinating multiple AI models, external services, and business logic. For product teams, this complexity quickly becomes overwhelming when expressed purely in code. Visual flows provide the clarity needed to build, maintain, and iterate on sophisticated AI workflows.</p>\n\n<p>The key advantage lies in collaboration. When your PM can see the agent's decision tree, your designer can understand the user journey, and your engineers can debug the data flow, everyone stays aligned. Visual flows bridge the gap between technical implementation and business requirements.</p>\n\n<p>Modern AI development demands rapid iteration. Visual flows enable teams to quickly prototype new agent behaviors, test different conversation paths, and adjust business logic without diving deep into code. This visual approach reduces the cognitive load of understanding complex systems and accelerates the development cycle.</p>`,\n\n  Programming: `<h2>‚ö° In-Codebase Visual Flows: The Best of Both Worlds</h2>\n<p>The traditional choice between visual tools and code is a false dichotomy. Modern development demands both: the clarity of visual representation and the power of programmatic control. In-codebase visual flows deliver exactly this combination.</p>\n\n<p>Unlike external workflow platforms that create integration headaches, visual flows that live in your codebase maintain full type safety, version control, and testing capabilities. Your agent's logic is both visually clear and programmatically sound. Changes to your data models automatically propagate through the visual flow, catching errors at compile time.</p>\n\n<p>For agentic workflows specifically, this approach shines. AI agents often require complex decision trees, multi-step processing chains, and sophisticated error handling. Visual flows make these patterns immediately comprehensible while preserving the flexibility to drop down to code when needed. The result is AI systems that are both powerful and maintainable.</p>`\n};\n\nexport const AnthropicStub: CodeNode = {\n  id: \"AnthropicStub\",\n  displayName: \"Anthropic (Custom Stub)\",\n  namespace: \"ai\",\n  menuDisplayName: \"Anthropic (Custom Stub)\",\n  description: \"üé≠ Custom Anthropic stub for blog generation demo - Edit this file to customize responses!\",\n  icon: `\n<svg version=\"1.1\" id=\"Layer_1\" xmlns:x=\"ns_extend;\" xmlns:i=\"ns_ai;\" xmlns:graph=\"ns_graphs;\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 92.2 65\" style=\"enable-background:new 0 0 92.2 65;\" xml:space=\"preserve\">\n <style type=\"text/css\">\n  .st0{fill: currentColor;}\n </style>\n <path class=\"st0\" d=\"M66.5,0H52.4l25.7,65h14.1L66.5,0z M25.7,0L0,65h14.4l5.3-13.6h26.9L51.8,65h14.4L40.5,0C40.5,0,25.7,0,25.7,0z\n\t M24.3,39.3l8.8-22.8l8.8,22.8H24.3z\">\n </path>\n</svg>`,\n  inputs: {\n    apiKey: {\n      editorType: \"secret\",\n      editorTypeData: {\n        defaultName: \"ANTHROPIC_API_KEY\",\n      },\n      description: \"üîë Anthropic API Key (ignored in browser stub)\",\n    },\n    model: {\n      defaultValue: \"claude-3-7-sonnet-latest\",\n      editorType: \"select\",\n      editorTypeData: {\n        options: [\n          \"claude-opus-4-20250514\",\n          \"claude-sonnet-4-20250514\",\n          \"claude-3-7-sonnet-20250219\",\n          \"claude-3-7-sonnet-latest\",\n          \"claude-3-5-sonnet-20241022\",\n          \"claude-3-5-sonnet-latest\",\n          \"claude-3-5-sonnet-20240620\",\n          \"claude-3-5-haiku-20241022\",\n          \"claude-3-5-haiku-latest\",\n          \"claude-3-opus-20240229\",\n          \"claude-3-opus-latest\",\n          \"claude-3-sonnet-20240229\",\n          \"claude-3-haiku-20240307\",\n        ],\n      },\n      description: \"ü§ñ Anthropic Claude model to simulate\",\n    },\n    prompt: {\n      defaultValue: \"Generate a response to the following: {{text}}\",\n      editorType: \"longtext\",\n      description: \"üí¨ Prompt for text generation\",\n    },\n    temperature: {\n      defaultValue: 0.7,\n      editorType: \"number\",\n      description: \"üå°Ô∏è Temperature for response generation (0-1)\",\n    },\n    maxTokens: {\n      defaultValue: 1000,\n      editorType: \"number\",\n      description: \"üìè Maximum number of tokens to generate\",\n    },\n  },\n  outputs: {\n    response: {\n      description: \"üéØ Generated text response\",\n    },\n  },\n  run: async (inputs, outputs) => {\n    // üïê Mock delay to simulate API call - you can customize this timing!\n    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));\n\n    const { prompt } = inputs;\n    \n    // üîç Extract topic and subject from prompt for realistic responses\n    const topicMatch = prompt.match(/topic.*?\"([^\"]+)\"/i) || prompt.match(/{{topic}}/);\n    const subjectMatch = prompt.match(/subject.*?\"([^\"]+)\"/i) || prompt.match(/{{subject}}/);\n    \n    const topic = topicMatch ? (typeof topicMatch[1] === 'string' ? topicMatch[1] : 'AI') : 'AI';\n    \n    // üé® Generate blog content based on topic - edit these templates!\n    let mockResponse = mockBlogContent[topic as keyof typeof mockBlogContent];\n    \n    if (!mockResponse) {\n      // üîÑ Fallback to AI content if topic not found\n      mockResponse = mockBlogContent.AI;\n    }\n    \n    // üéØ If there's a subject in the prompt, customize the response\n    if (subjectMatch && typeof subjectMatch[1] === 'string') {\n      const subject = subjectMatch[1];\n      // üìù Replace generic terms with the specific subject\n      mockResponse = mockResponse.replace(/Artificial Intelligence|Modern Technology|Programming/g, subject);\n    }\n    \n    // üéÅ Add a custom signature to show this is from the editable stub\n    mockResponse += `\\n\\n<p><em>‚ú® Generated by your custom AnthropicStub - edit AnthropicStub.flyde.ts to customize responses!</em></p>`;\n    \n    outputs.response.next(mockResponse);\n  },\n};",
        "description": "üé≠ Editable Anthropic stub - customize responses here!"
      }
    ]
  }
];

export function getExampleById(id: string): PlaygroundExample | undefined {
  return playgroundExamples.find(example => example.id === id);
}

export function getExamplesList(): { id: string; name: string; description: string }[] {
  return playgroundExamples.map(({ id, name, description }) => ({ id, name, description }));
}

export function getExampleFiles(id: string): PlaygroundExample['files'] {
  const example = getExampleById(id);
  return example?.files || [];
}
